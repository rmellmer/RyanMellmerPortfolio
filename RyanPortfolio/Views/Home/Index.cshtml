
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    #graph-container {
        top: 0px;
        left: 0px;
        position: relative;
        width: 100%;
        height: 90%;
        z-index: -1;
    }

    #controls {
        z-index: 0;
        position: absolute;
    }
    
    #portfolio {
        padding-top:30px;
        background-color:grey;
    }

    #download {
        padding-top:10px;
    }

    #about {
        padding-top:30px !important;
        padding-bottom:30px;
    }

    #contact {
        padding-top:40px;
    }

    .mobile {
        display: none;
    }
    @@media (max-width:1000px) {
        .mobile {
            display: block;
        }
        .desktop {
            display: none;
        }
    }   

    .modal-header, .modal-body th, .modal-body td {
        color:black;
    }
</style>

<nav class="navbar navbar-custom navbar-fixed-top" role="navigation">
    <div class="container">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-main-collapse">
                Menu <i class="fa fa-bars"></i>
            </button>
            <a class="navbar-brand page-scroll desktop" href="#page-top">
                <i class="fa fa-code"></i> <span class="light">Ryan Mellmer</span> Software
            </a>
            <a class="navbar-brand page-scroll mobile" href="#page-top">
                <i class="fa fa-code"></i> <span class="light">RM</span> Software
            </a>
        </div>
        <!-- Collect the nav links, forms, and other content for toggling -->
        <div class="collapse navbar-collapse navbar-right navbar-main-collapse">
            <ul class="nav navbar-nav">
                <!-- Hidden li included to remove active class from about link when scrolled up past about section -->
                <li class="hidden">
                    <a href="#page-top"></a>
                </li>
                <li>
                    <a class="page-scroll" href="#about">About</a>
                </li>
                <li>
                    <a class="page-scroll" href="#portfolio">Interactive Portfolio</a>
                </li>
                <li>
                    <a class="page-scroll" href="#download">Blog</a>
                </li>
                <li>
                    <a class="page-scroll" href="#contact">Contact</a>
                </li>
            </ul>
        </div>
        <!-- /.navbar-collapse -->
    </div>
    <!-- /.container -->
</nav>

<!-- Intro Header -->
<header class="intro">
    <div class="intro-body">
        <div class="container">
            <div class="row">
                <div class="col-md-10 col-md-offset-1">
                    <h1 class="brand-heading">Ryan Mellmer Software</h1>
                    <p class="intro-text">
                        Full-stack designer/developer producing unique software solutions.
                    </p>
                    <a href="#about" class="btn btn-circle page-scroll">
                        <i class="fa fa-angle-double-down animated"></i>
                    </a>
                </div>
            </div>
        </div>
    </div>
</header>
<!-- About Section -->
<section id="about" class="container text-center">
    <div class="row">
        <div class="col-lg-4 col-lg-offset-4">
            <img class="img-circle" src="~/img/me.jpg" width="300"/>
        </div>
    </div>
    <br/>
    <div class="row">
        <div class="col-lg-8 col-lg-offset-2">
            <h2>About Ryan</h2>
            <p>I graduated from Portland State University with a BS in Computer Science in March 2017. I am currently working in the Applied Intelligence group at <a href="http://www.mcafee.com/">McAfee</a>, and I have completed internships at both <a href="http://www.onsemi.com/PowerSolutions/home.do">ON Semiconductor</a> and <a href="http://www.intel.com/">Intel</a>.</p>
            <br />
            <p>Recently I have grown an interest in Big Data as well as any emerging tech within IOT (Internet of Things).</p>            
        </div>
    </div>
</section>
<!-- sigma js -->
<section id="portfolio" class="content-section text-center">
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2">
                <h2>Resume</h2>
                <p>Grab a copy of <a href="https://drive.google.com/uc?export=download&id=0B8ri0HEthLncVnhiU1puZmEwcFk">my current resume</a> or click on a node below to see more!</p>
            </div>
        </div>
    </div>
</section>
<div id="graph-container" name="graph-container" style="height:60vh;width:70vw;margin-left:15vw;"></div>
<div class="modal fade" id="portfolioPopup">
    <div class="modal-dialog" role="document">
        <div class="modal-content" id="portfolioPopupData">
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div><!-- /.modal -->
<!-- Download Section -->
<section id="download" class="content-section text-center">
    <div class="download-section">
        <div class="container">
            <div class="col-lg-8 col-lg-offset-2">
                <h2>Ryan's Wordpress Blog</h2>
                <p>I do my best to keep my blog up-to-date with my current software endevours and projects!</p>
                <a href="http://ryanmellmer.wordpress.com/" class="btn btn-default btn-lg">Visit Wordpress Blog</a>
            </div>
        </div>
    </div>
</section>
<!-- Contact Section -->
<section id="contact" class="container content-section text-center">
    <div class="row">
        <div class="col-lg-8 col-lg-offset-2">
            <h2>Contact Me</h2>
            <p>Feel free to email me with software development questions or to just say hello!</p>
            <p>
                <a href="mailto:ryanmellmer@gmail.com">ryanmellmer@gmail.com</a>
            </p>
            <ul class="list-inline banner-social-buttons">
                <li>
                    <a href="https://twitter.com/ryanmellmer" class="btn btn-default btn-lg"><i class="fa fa-twitter fa-fw"></i> <span class="network-name">Twitter</span></a>
                </li>
                <li>
                    <a href="https://github.com/rmellmer" class="btn btn-default btn-lg"><i class="fa fa-github fa-fw"></i> <span class="network-name">GitHub</span></a>
                </li>
            </ul>
        </div>
    </div>
</section>
<!-- Footer -->
<footer>
    <div class="container text-center">
        <p>Copyright &copy; Ryan Mellmer @DateTime.Today.Year</p>
    </div>
</footer>

<script>
    var i,
    s,
    o,
    L = 10,
    N = 5,
    E = 0,
    g = {
        nodes: [],
        edges: []
    },
    step = 0,
    GRID_X = 0,
    GRID_Y = 0,
    prefix = 'grid_',
    inside = false,
    toolconfig,
    tooltips,
    triggered = false;

    var template =  '<div class="modal-header">' +
                    '  <button type="button" class="close" data-dismiss="modal" aria-label="Close">' +
                    '    <span aria-hidden="true">&times;</span>' + 
                    '  </button>' +
                    '  <h4 class="modal-title">{{{label}}}</h4>' +
                    '</div>' +
                    '<div class="modal-body">' +
                    '    <table>' +
                    '      <tr><th>{{{project}}}</th></tr>' +
                    '      <tr><td>{{{details}}}</td></tr>' +
                    '      <tr><td><div>{{{link}}}</div></td></tr>' +
                    '    </table>' +
                    '</div>';

    $(function () {
        var oTop = $('#graph-container').offset().top - (window.innerHeight/4);
        $(window).scroll(function () {

            var pTop = $('body').scrollTop();
            if (pTop > oTop && triggered == false) {
                triggered = true;
                switchMode($('#graph-container'));
            }
        });

        $('#hideEdges').click(function () {
            if ($(this).is(':checked')) {
                s.graph.edges().forEach(function (e) {
                    e.hidden = false;
                });
            }
            else {
                s.graph.edges().forEach(function (e) {
                    e.hidden = true;
                });
            }
        });

        $.get('@Url.Content("~/Home/GetSkillCategories")', function (data) {
            data = $.parseJSON(data);
            $.each(data, function (i, item) {
                o = {
                    id: item.id,
                    label: item.name,
                    depth: 0,
                    parent: true,
                    circular_x: L * Math.cos(Math.PI * 2 * i / N - Math.PI / 2),
                    circular_y: L * Math.sin(Math.PI * 2 * i / N - Math.PI / 2),
                    circular_size: 3,
                    circular_color: '#' + (
                      Math.floor(Math.random() * 16777215).toString(16) + '000000'
                    ).substr(0, 6),
                    grid_x: Math.floor(i / L),
                    grid_y: (i % L) * 4,
                    grid_size: 3,
                    grid_color: '#ccc'
                };
                ['x', 'y', 'size', 'color'].forEach(function (val) {
                    o[val] = o['grid_' + val];
                });
                g.nodes.push(o);
            });

            s = new sigma({
                graph: g,
                renderer: {
                    container: document.getElementById('graph-container'),
                    type: 'canvas'
                },
                settings: {
                    labelThreshold: 0,
                    doubleClickEnabled: false,
                    autoRescale: true,
                    animationsTime: 1000,
                    minNodeSize: 1,
                    maxNodeSize: 10,
                    minEdgeSize: 0.5,
                    maxEdgeSize: 4,
                    sideMargin: 4,
                    enableEdgeHovering: false,
                    edgeHoverColor: 'edge',
                    defaultEdgeHoverColor: '#000',
                    edgeHoverSizeRatio: 2,
                    edgeHoverExtremities: true,
                    autoCurveRatio: 2,
                    defaultLabelColor: '#fff'
                }
            });

            s.settings('zoomingRatio', 1);
            s.refresh();

            s.bind('clickNode rightClickNode', function (e) {
                if (e.data.node.parent) {
                    GetChildWords(e.data.node.id);
                }
                else {
                    var node = e.data.node;
                    $('#portfolioPopupData').html(Mustache.render(template, node));
                    $('#portfolioPopup').modal('show');
                }
            });

            $('#graph-container').waypoint(function (direction) {
                switchMode(this);
            }, {
                offset: 'bottom-in-view'
            });
        });
    });

    function switchMode(e) {
        if (prefix == 'grid_') {
            prefix = 'circular_';
            if ($('#hideEdges').is(':checked')) {
                s.graph.edges().forEach(function (e) {
                    e.hidden = true;
                });
            }
            else {
                s.graph.edges().forEach(function (e) {
                    e.hidden = false;
                });
            }
            sigma.plugins.animate(
                s,
                {
                    x: prefix + 'x',
                    y: prefix + 'y',
                    size: prefix + 'size',
                    color: prefix + 'color'
                },
                {
                    onComplete: function () {
                        s.refresh();
                        var config = {
                            nodeMargin: 40.0,
                            scaleNodes: 1,
                            easing: 'quadraticInOut'
                        };
                        var listener = s.configNoverlap(config);
                        listener.bind('interpolate', function (event) {
                            sigma.misc.animation.camera(
                              s.camera,
                              {
                                  x: 40,
                                  y: 0,
                                  ratio: 1.3
                              },
                              { duration: s.settings('animationsTime') }
                            );
                        });
                        s.startNoverlap();
                    }
                }
            );
        }
        else {
            prefix = 'grid_';
            s.graph.edges().forEach(function (e) {
                e.hidden = true;
            });
            sigma.misc.animation.camera(
              s.camera,
              {
                  x: 80,
                  y: 0,
                  ratio: 1
              },
              { duration: s.settings('animationsTime') }
            );
            sigma.plugins.animate(
                s,
                {
                    x: prefix + 'x',
                    y: prefix + 'y',
                    size: prefix + 'size',
                    color: prefix + 'color'
                },
                {
                    onComplete: function () {
                        s.refresh();
                    }
                }
            );
        }
    }

    function GetChildWords(parentID) {
        $.get('@Url.Content("~/Home/GetChildSkills")', { parent: parentID }, function (data) {
            data = $.parseJSON(data);
            var parentNode = s.graph.nodes(parentID);
            var parentDepth = parentNode.depth;
            var parentX = parentNode.x;
            var parentY = parentNode.y;
            var parentGridX = parentNode.grid_x;
            var parentGridY = parentNode.grid_y;
            var parentColor = parentNode.color;
            var newNodes = [];
            $.each(data, function (i, item) {
                if (s.graph.nodes(item.id) == null) {
                    var pt_angle = Math.random() * 2 * Math.PI;
                    var pt_radius_sq = Math.random() * 2 * L;
                    var pt_x = Math.sqrt(pt_radius_sq) * Math.cos(pt_angle);
                    var pt_y = Math.sqrt(pt_radius_sq) * Math.sin(pt_angle);
                    newNodes.push(item.id);
                    childDepth = parentDepth + 1;
                    childL = L - childDepth;
                    if (childL < 1) childL = 1;
                    o = {
                        id: item.id,
                        label: item.name,
                        depth: childDepth,
                        project: item.examples[0].title,
                        details: item.examples[0].description,
                        link: item.examples[0].link,
                        circular_x: parentNode.circular_x,
                        circular_y: parentNode.circular_y,
                        circular_size: 2,
                        circular_color: '#' + (
                          Math.floor(Math.random() * 16777215).toString(16) + '000000'
                        ).substr(0, 6),
                        grid_x: parentGridX + 1,
                        grid_y: parentGridY + (i + 1),
                        grid_size: 2,
                        grid_color: '#ccc'
                    };
                    o['x'] = parentX;
                    o['y'] = parentY;
                    o['color'] = o[prefix +'color'];
                    o['size'] = o[prefix + 'size'];
                    s.graph.addNode(o);
                    N = N + 1;
                    s.refresh();
                }
                if (s.graph.edges('e' + parentID + '_' + item.id) == null && s.graph.edges('e' + item.id + '_' + parentID) == null) {
                    s.graph.addEdge({
                        id: 'e' + parentID + '_' + item.id,
                        source: parentID,
                        target: item.id,
                        type: 'line',
                        size: 1,
                        color: parentColor
                    });
                }
                if (prefix == 'grid_') {
                    s.graph.edges().forEach(function (e) {
                        e.hidden = true;
                    });
                }
            });
            HoverNodes(parentID);
            sigma.plugins.animate(
            s,
            {
                x: prefix + 'x',
                y: prefix + 'y',
                size: prefix + 'size',
                color: prefix + 'color'
            },
            {
                onComplete: function () {
                    if (prefix == 'circular_') {
                        var config = {
                            nodeMargin: 40.0,
                            scaleNodes: 1,
                            easing: 'quadraticInOut'
                        };
                        var listener = s.configNoverlap(config);
                        listener.bind('interpolate', function (event) {
                            sigma.misc.animation.camera(
                              s.camera,
                              {
                                  x: 40,
                                  y: 0,
                                  ratio: 1.3
                              },
                              { duration: s.settings('animationsTime') }
                            );
                        });
                        s.startNoverlap();
                    }
                    s.refresh();
                }
            }
        );

            s.refresh();
        });
    }

    function HoverNodes(parentID) {
        var hover = [];
        $.each(s.graph.edges(), function (i, item) {
            if (item.source == parentID) {
                hover.push(item.target);
            }
        });
        hover.push(parentID);
        $.each(hover, function (i, item) {
            s.renderers[0].dispatchEvent('overNode', { node: item });
        });
    }

    function HideOtherNodes(id) {
        s.graph.edges().forEach(function (e) {
            if (e.target != id && e.source != id) {
                e.hidden = true;
            }
        });
    }

    function ShowAllNodes() {
        s.graph.nodes().forEach(function (e) {
            e.hidden = false;
        });
        s.graph.edges().forEach(function (e) {
            e.hidden = false;
        });
    }
</script>
<script src="~/scripts/grayscale.js"></script>